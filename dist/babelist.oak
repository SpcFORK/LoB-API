// oak build
__Oak_Modules := {}
__Oak_Import_Aliases := ?
fn __oak_modularize(name, module) __Oak_Modules.(name) := module
fn __oak_module_import(name) if ___runtime_lib?(name) {
	true -> import(name)
	_ -> if type(module := __Oak_Modules.(name)) {
		:null -> if module := __Oak_Modules.(__Oak_Import_Aliases.(name)) {
			? -> import(name)
			_ -> {
				mod := module()
				__Oak_Modules.(name) := mod
				mod
			}
		}
		:function -> {
			m := module()
			__Oak_Modules.(name) := m
			m
		}
		_ -> module
	}
}
(__oak_modularize('cst.oak',fn()(std:=__oak_module_import('std'),str:=__oak_module_import('str'),fmt:=__oak_module_import('fmt'),http:=__oak_module_import('http'),{lru:lru}:=__oak_module_import('lru.oak'),endpoints:={_domain!:fn domain!(v)'https://libraryofbabel.info/'<<v,_cgi!:fn cgi!(xu)domain!(xu)<<'.cgi',book:cgi!('book'),titler:cgi!('titler'),browse:cgi!('browse'),download:cgi!('download'),anglishize:cgi!('anglishize'),bookmarker:cgi!('bookmarker'),resourcelocator:cgi!('resourcelocator')},fn query(seed,wall,ch,vol,page)(rest:='{{0}}-w{{1}}-s{{2}}-v{{3}}',if page !=?{true->rest<<':'<<string(page)},fmt.format(rest,string(seed),string(wall),string(ch),str.padStart(string(vol),2,'0'))),fn bookmarkQuery(name,index)(fmt.format('{{0}}:{{1}}',name,string(index))),fn formHeader()({'content-type':'application/x-www-form-urlencoded'}),fn safeResp(r)std.default(r,{}).resp,fn volumeFormat(v)str.padStart(string(v),2,'0'),fn Titler(seed,wall,ch)http.queryEncode({hex:seed,wall:wall,shelf:ch}),fn reqTitler(b)safeResp(req({url:endpoints.titler,method:'POST',headers:formHeader(),body:b})),fn handleTitler(b)str.split(reqTitler(b).body,';'),fn Download(seed,wall,ch,vol,title)http.queryEncode({hex:seed,wall:wall,shelf:ch,volume:volumeFormat(vol),page:?,title:title}),fn reqDownload(b)safeResp(req({url:endpoints.download,method:'POST',headers:formHeader(),body:b})),fn Bookmark(seed,wall,ch,vol,page,title)http.queryEncode({hex:seed,wall:wall,shelf:ch,volume:volumeFormat(vol),page:page,title:title}),fn reqBookmark(b)safeResp(req({url:endpoints.bookmark,method:'POST',headers:formHeader(),body:b})),fn reqHasBookmark(b)safeResp(req({url:endpoints.bookmark,method:'GET',headers:formHeader(),body:b})),fn _redirLocation(r)r.headers.Location,fn handleBookmark(b)_redirLocation(reqBookmark(b)),fn handleHasBookmark(b)_redirLocation(reqHasBookmark(b)),fn Resource(s)http.queryEncode({extension:s}),fn reqResource(b)safeResp(req({url:endpoints.resourcelocator,method:'POST',headers:formHeader(),body:b})),TITLES_LRU_MAX:=32,TITLES_LRU:=lru(TITLES_LRU_MAX),fn getTitles(seed,wall,ch)if true{name:=query(seed,wall,ch,?)->val,val:=TITLES_LRU.get(name)->val,val !=?->val,_->(val:=handleTitler(Titler(seed,wall,ch)),TITLES_LRU.set(name,val),val)},fn getTitle(seed,wall,ch,vol)getTitles(seed,wall,ch).(vol),fn getBook(seed,wall,ch,vol)reqDownload(Download(seed,wall,ch,vol,getTitle(seed,wall,ch,vol))),fn binIndex(i)pow(2,i),fn leftShift(value,shift)value*binIndex(shift),fn rightShift(value,shift)int(value/binIndex(shift)),fn xorShift(input,mask,shift)input^(leftShift((input%mask),shift)),fn calculateRevpXorShift(p,mask,shift)p^(leftShift((p%mask),shift)),fn calculateRevpRightShift(p,shift)p^(rightShift(p,shift)),fn invertXorShift(pointer,mask,shift)(revp:=calculateRevpXorShift(pointer,mask,shift),revp<-calculateRevpXorShift(revp,mask,shift),pointer^(leftShift((revp%mask),shift))),fn invertRightShift(pointer,shift)(revp:=calculateRevpRightShift(pointer,shift),revp<-calculateRevpRightShift(revp,shift),pointer^(rightShift(revp,shift))),fn IPRNG(seed)(m:=pow(2,32),a:=m-1,c:=987654321,last:=seed,maskone:=std.fromHex('9D2C5680'),masktwo:=std.fromHex('EFC60000'),fn nextInt()(pointer:=(a*last+c)%m,pointer<-pointer^(rightShift(pointer,1098239)),pointer<-xorShift(pointer,maskone,698879),pointer<-xorShift(pointer,masktwo,1497599),pointer<-pointer^(rightShift(pointer,1797118)),last<-pointer,pointer),fn invertInt(next)(pointer:=next,pointer<-invertRightShift(pointer,1797118),pointer<-invertXorShift(pointer,masktwo,1497599),pointer<-invertXorShift(pointer,maskone,698879),pointer<-invertRightShift(pointer,1098239),pointer<-(ainverse(pointer-c))%m,if pointer<0{true->pointer<-pointer+m},pointer),{integer:nextInt,invert:invertInt}),fn generateRandomSequence(seed,count,prng)(if prng=?{true->prng<-IPRNG(seed)},sequence:=[],i:=0,fn call()sequence.push(prng.integer()),fn recurse()if i<count{true->(call(),i<-i+1,recurse())},recurse(),sequence),{Bookmark:Bookmark,Download:Download,IPRNG:IPRNG,Resource:Resource,TITLES_LRU:TITLES_LRU,TITLES_LRU_MAX:TITLES_LRU_MAX,Titler:Titler,_redirLocation:_redirLocation,binIndex:binIndex,bookmarkQuery:bookmarkQuery,calculateRevpRightShift:calculateRevpRightShift,calculateRevpXorShift:calculateRevpXorShift,cgi!:cgi!,domain!:domain!,endpoints:endpoints,fmt:fmt,formHeader:formHeader,generateRandomSequence:generateRandomSequence,getBook:getBook,getTitle:getTitle,getTitles:getTitles,handleBookmark:handleBookmark,handleHasBookmark:handleHasBookmark,handleTitler:handleTitler,http:http,invertRightShift:invertRightShift,invertXorShift:invertXorShift,leftShift:leftShift,lru:lru,query:query,reqBookmark:reqBookmark,reqDownload:reqDownload,reqHasBookmark:reqHasBookmark,reqResource:reqResource,reqTitler:reqTitler,rightShift:rightShift,safeResp:safeResp,std:std,str:str,volumeFormat:volumeFormat,xorShift:xorShift})),__oak_modularize('linkedList.oak',fn()(fn doublyLinkedNode(next,prev,data)({next:next,prev:prev,data:data}),fn doublyLinkedList(firstNode,lastNode)({firstNode:firstNode,lastNode:lastNode}),fn insertBefore(list,node,newNode)(newNode.next:=node,if node.prev{?->(newNode.prev:=?,list.firstNode:=newNode),_->(newNode.prev:=node.prev,node.prev.next:=newNode)},node.prev:=newNode),fn insertBeginning(list,newNode)(if list.firstNode{?->(list.firstNode:=newNode,list.lastNode:=newNode,newNode.prev:=?,newNode.next:=?),_->insertBefore(list,list.firstNode,newNode)}),fn remove(list,node)(if node.prev{?->list.firstNode:=node.next,_->node.prev.next:=node.next},if node.next{?->list.lastNode:=node.prev,_->node.next.prev:=node.prev}),{doublyLinkedList:doublyLinkedList,doublyLinkedNode:doublyLinkedNode,insertBefore:insertBefore,insertBeginning:insertBeginning,remove:remove})),__oak_modularize('lru.oak',fn()({doublyLinkedNode:doublyLinkedNode,doublyLinkedList:doublyLinkedList,insertBeginning:insertBeginning,remove:remove}:=__oak_module_import('linkedList.oak'),fn lru(max)(count:=0,cache:={},list:=doublyLinkedList(?,?),fn pop()(cache.(list.lastNode.data):=_,remove(list,list.lastNode),count<-count-1),fn access(key)(remove(list,cache.(key).node),insertBeginning(list,cache.(key).node)),{set:fn(key,value)(if count+1>max{true->pop()},count<-count+1,cache.(key):={value:value,node:doublyLinkedNode(?,?,key)},insertBeginning(list,cache.(key).node)),get:fn(key)if cache.(key){?->?,_->(access(key),cache.(key).value)},count:fn()(count),_debug:fn()({firstNode:list.firstNode,lastNode:list.lastNode})}),{doublyLinkedList:doublyLinkedList,doublyLinkedNode:doublyLinkedNode,insertBeginning:insertBeginning,lru:lru,remove:remove})),__oak_modularize('main.oak',fn()(std:=__oak_module_import('std'),cst:=__oak_module_import('cst.oak'),r:=cst.Resource('<p>Hello, World!</p>'),std.println(r),std.println(cst.reqResource(r)),{cst:cst,r:r,std:std})),__Oak_Import_Aliases<-{},__oak_module_import('main.oak'))