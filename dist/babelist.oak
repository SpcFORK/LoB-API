// oak build
__Oak_Modules := {}
__Oak_Import_Aliases := ?
fn __oak_modularize(name, module) __Oak_Modules.(name) := module
fn __oak_module_import(name) if ___runtime_lib?(name) {
	true -> import(name)
	_ -> if type(module := __Oak_Modules.(name)) {
		:null -> if module := __Oak_Modules.(__Oak_Import_Aliases.(name)) {
			? -> import(name)
			_ -> {
				mod := module()
				__Oak_Modules.(name) := mod
				mod
			}
		}
		:function -> {
			m := module()
			__Oak_Modules.(name) := m
			m
		}
		_ -> module
	}
}
(__oak_modularize('cst.oak',fn()(std:=__oak_module_import('std'),str:=__oak_module_import('str'),fmt:=__oak_module_import('fmt'),http:=__oak_module_import('http'),{lru:lru}:=__oak_module_import('lru.oak'),endpoints:={_domain!:fn domain!(v)'https://libraryofbabel.info/'<<v,_cgi!:fn cgi!(xu)domain!(xu)<<'.cgi',book:cgi!('book'),random:cgi!('random'),search:cgi!('search'),titler:cgi!('titler'),browse:cgi!('browse'),download:cgi!('download'),anglishize:cgi!('anglishize'),bookmarker:cgi!('bookmarker'),resourcelocator:cgi!('resourcelocator')},fn query(seed,wall,ch,vol,page)(rest:='{{0}}-w{{1}}-s{{2}}-v{{3}}',if page !=?{true->rest<<':'<<string(page)},fmt.format(rest,string(seed),string(wall),string(ch),str.padStart(string(vol),2,'0'))),fn bookmarkQuery(name,index)(fmt.format('{{0}}:{{1}}',name,string(index))),fn formHeader()({'content-type':'application/x-www-form-urlencoded'}),fn safeResp(r)std.default(r,{}).resp,fn volumeFormat(v)str.padStart(string(v),2,'0'),fn redirLocation(r)r.headers.Location,fn powerTwo(i)pow(2,i),fn shiftLeft(value,shift)int(value*powerTwo(shift)),fn shiftRight(value,shift)int(value/powerTwo(shift)),fn xorOperation(input,mask,shift)int(input^(shiftLeft((input%mask),shift))),fn calculateRevXorOperation(p,mask,shift)int(p^(shiftLeft((p%mask),shift))),fn calculateRevRightShift(p,shift)int(p^(shiftRight(p,shift))),fn reverseXorOperation(pointer,mask,shift)(rev:=calculateRevXorOperation(pointer,mask,shift),rev<-calculateRevXorOperation(rev,mask,shift),int(pointer^(shiftLeft((rev%mask),shift)))),fn reverseRightShift(pointer,shift)(rev:=calculateRevRightShift(pointer,shift),rev<-calculateRevRightShift(rev,shift),int(pointer^(shiftRight(rev,shift)))),{bookmarkQuery:bookmarkQuery,calculateRevRightShift:calculateRevRightShift,calculateRevXorOperation:calculateRevXorOperation,cgi!:cgi!,domain!:domain!,endpoints:endpoints,fmt:fmt,formHeader:formHeader,http:http,lru:lru,powerTwo:powerTwo,query:query,redirLocation:redirLocation,reverseRightShift:reverseRightShift,reverseXorOperation:reverseXorOperation,safeResp:safeResp,shiftLeft:shiftLeft,shiftRight:shiftRight,std:std,str:str,volumeFormat:volumeFormat,xorOperation:xorOperation})),__oak_modularize('gen.oak',fn()(std:=__oak_module_import('std'),str:=__oak_module_import('str'),fmt:=__oak_module_import('fmt'),{powerTwo:powerTwo,shiftLeft:shiftLeft,shiftRight:shiftRight,xorOperation:xorOperation,calculateRevXorOperation:calculateRevXorOperation,calculateRevRightShift:calculateRevRightShift,reverseXorOperation:reverseXorOperation,reverseRightShift:reverseRightShift}:=__oak_module_import('cst.oak'),firstMask:=2636928640,secondMask:=4022730752,firstXorShift:=1098239,firstXorMaskOp:=698879,secondXorMaskOp:=1497599,secondXorShift:=1797118,modValue:=pow(2,32),multiplier:=modValue-1,constant:=987654321,fn RandomGenerator(seed)(previous:=seed,fn computeNext()(pointer:=(multiplier*previous-constant+modValue)%modValue,pointer<-pointer^(shiftRight(pointer,firstXorShift)),pointer<-xorOperation(pointer,firstMask,firstXorMaskOp),pointer<-xorOperation(pointer,secondMask,secondXorMaskOp),pointer<-pointer^(shiftRight(pointer,secondXorShift)),previous<-pointer,pointer),fn reverseInt(value)(value<-value^(shiftRight(value,secondXorShift)),value<-calculateRevXorOperation(value,secondMask,secondXorMaskOp),value<-calculateRevXorOperation(value,firstMask,firstXorMaskOp),value<-value^(calculateRevRightShift(value,firstXorShift)),previous<-value,value),{next:computeNext,invert:reverseInt}),fn createRandomSequence(seed,count,rng)(if rng=?{true->rng<-RandomGenerator(seed)},seq:=[],i:=0,fn performAction()seq<<rng.next(),fn iterate()if i<count{true->(performAction(),i<-i+1,iterate())},iterate(),seq),fn reverseRandomSequence(seed,seq,rng)(if rng=?{true->rng<-RandomGenerator(seed)},reversedSeq:=[],fn performReverse(value)reversedSeq<<rng.invert(value),std.each(seq,performReverse),reversedSeq),{RandomGenerator:RandomGenerator,calculateRevRightShift:calculateRevRightShift,calculateRevXorOperation:calculateRevXorOperation,constant:constant,createRandomSequence:createRandomSequence,firstMask:firstMask,firstXorMaskOp:firstXorMaskOp,firstXorShift:firstXorShift,fmt:fmt,modValue:modValue,multiplier:multiplier,powerTwo:powerTwo,reverseRandomSequence:reverseRandomSequence,reverseRightShift:reverseRightShift,reverseXorOperation:reverseXorOperation,secondMask:secondMask,secondXorMaskOp:secondXorMaskOp,secondXorShift:secondXorShift,shiftLeft:shiftLeft,shiftRight:shiftRight,std:std,str:str,xorOperation:xorOperation})),__oak_modularize('linkedList.oak',fn()(fn doublyLinkedNode(next,prev,data)({next:next,prev:prev,data:data}),fn doublyLinkedList(firstNode,lastNode)({firstNode:firstNode,lastNode:lastNode}),fn insertBefore(list,node,newNode)(newNode.next:=node,if node.prev{?->(newNode.prev:=?,list.firstNode:=newNode),_->(newNode.prev:=node.prev,node.prev.next:=newNode)},node.prev:=newNode),fn insertBeginning(list,newNode)(if list.firstNode{?->(list.firstNode:=newNode,list.lastNode:=newNode,newNode.prev:=?,newNode.next:=?),_->insertBefore(list,list.firstNode,newNode)}),fn remove(list,node)(if node.prev{?->list.firstNode:=node.next,_->node.prev.next:=node.next},if node.next{?->list.lastNode:=node.prev,_->node.next.prev:=node.prev}),{doublyLinkedList:doublyLinkedList,doublyLinkedNode:doublyLinkedNode,insertBefore:insertBefore,insertBeginning:insertBeginning,remove:remove})),__oak_modularize('lru.oak',fn()({doublyLinkedNode:doublyLinkedNode,doublyLinkedList:doublyLinkedList,insertBeginning:insertBeginning,remove:remove}:=__oak_module_import('linkedList.oak'),fn lru(max)(count:=0,cache:={},list:=doublyLinkedList(?,?),fn pop()(cache.(list.lastNode.data):=_,remove(list,list.lastNode),count<-count-1),fn access(key)(remove(list,cache.(key).node),insertBeginning(list,cache.(key).node)),{set:fn(key,value)(if count+1>max{true->pop()},count<-count+1,cache.(key):={value:value,node:doublyLinkedNode(?,?,key)},insertBeginning(list,cache.(key).node)),get:fn(key)if cache.(key){?->?,_->(access(key),cache.(key).value)},count:fn()(count),_debug:fn()({firstNode:list.firstNode,lastNode:list.lastNode})}),{doublyLinkedList:doublyLinkedList,doublyLinkedNode:doublyLinkedNode,insertBeginning:insertBeginning,lru:lru,remove:remove})),__oak_modularize('main.oak',fn()(std:=__oak_module_import('std'),cst:=__oak_module_import('cst.oak'),req:=__oak_module_import('req.oak'),gen:=__oak_module_import('gen.oak'),mygen:=__oak_module_import('mygen.oak'),{lru:lru}:=__oak_module_import('lru.oak'),r:=gen.RandomGenerator(0),std.println(r),std.println(gen.createRandomSequence(?,100,r)),{cst:cst,gen:gen,lru:lru,mygen:mygen,r:r,req:req,std:std})),__oak_modularize('mygen.oak',fn()(std:=__oak_module_import('std'),str:=__oak_module_import('str'),fmt:=__oak_module_import('fmt'),fn BabelLibrary()Ctx:={constants:constants:={r:4.669,iterations:100,indexSize:1000},feigenbaum:feigenbaum:={generate:fn generate(x,r)x*r*(1-x),iterate:fn(x0,r,n)(x:=x0,std.loop(n,fn(_,_)(x<-generate(x,r),if x<0|x>1{true->x<-0.5})),x)},generateLocation:fn generateLocation(input)(hash:=0.5,std.each(std.range(len(input)),fn(i)(charCode:=codepoint((string(input)).(i)),hash<-feigenbaum.iterate(hash,constants.r+(charCode/1000),constants.iterations))),index:=int(hash*constants.indexSize),{hex:string(index),wall:int(hash*4),shelf:int(hash*5),volume:int(hash*32),page:int(hash*410)}),index:{entries:entries:={},_Location:fn Location(content,location)({content:content,location:location}),store:fn(content)(location:=generateLocation(content),entries.(location.hex):=Location(content,location),location),retrieve:fn retrieve(location)if ent:=entries.(location.hex){?->?,_->ent.content},search:fn(content)(location:=generateLocation(content),retrieve(location))}},library:=BabelLibrary(),text:='The Library of Babel contains all possible books',location:=library.index.store(text),std.println('Stored at location:'),std.println(location),retrieved:=library.index.retrieve(location),std.println('Retrieved content:'),std.println(retrieved),found:=library.index.search(text),std.println('Found at:'),std.println(found),{BabelLibrary:BabelLibrary,fmt:fmt,found:found,library:library,location:location,retrieved:retrieved,std:std,str:str,text:text})),__oak_modularize('req.oak',fn()(std:=__oak_module_import('std'),str:=__oak_module_import('str'),fmt:=__oak_module_import('fmt'),http:=__oak_module_import('http'),{endpoints:endpoints,query:query,bookmarkQuery:bookmarkQuery,formHeader:formHeader,safeResp:safeResp,volumeFormat:volumeFormat,redirLocation:redirLocation}:=__oak_module_import('cst.oak'),{lru:lru}:=__oak_module_import('lru.oak'),fn Anglishize(seed,wall,ch,vol,page)query(seed,wall,ch,vol,page),fn reqAnglishize(b)safeResp(req({url:endpoints.anglishize+'?'+b,method:'GET',headers:formHeader(),body:''})),fn Titler(seed,wall,ch)http.queryEncode({hex:seed,wall:wall,shelf:ch}),fn reqTitler(b)safeResp(req({url:endpoints.titler,method:'POST',headers:formHeader(),body:b})),fn handleTitler(b)str.split(reqTitler(b).body,';'),fn Download(seed,wall,ch,vol,title)http.queryEncode({hex:seed,wall:wall,shelf:ch,volume:volumeFormat(vol),page:?,title:title}),fn reqDownload(b)safeResp(req({url:endpoints.download,method:'POST',headers:formHeader(),body:b})),fn Bookmark(seed,wall,ch,vol,page,title)http.queryEncode({hex:seed,wall:wall,shelf:ch,volume:volumeFormat(vol),page:page,title:title}),fn reqBookmark(b)safeResp(req({url:endpoints.bookmark,method:'POST',headers:formHeader(),body:b})),fn reqHasBookmark(b)safeResp(req({url:endpoints.bookmark,method:'GET',headers:formHeader(),body:b})),fn handleBookmark(b)redirLocation(reqBookmark(b)),fn handleHasBookmark(b)redirLocation(reqHasBookmark(b)),fn Resource(s)http.queryEncode({extension:s}),fn reqResource(b)safeResp(req({url:endpoints.resourcelocator,method:'POST',headers:formHeader(),body:b})),fn reqRandom()safeResp(req({url:endpoints.random,method:'GET',headers:formHeader(),body:''})),fn handleRandom()redirLocation(reqRandom()),fn Search(find,method,btnSubmit)http.queryEncode({find:find,btnSubmit:std.default(btnSubmit,'Search'),method:std.default(method,'x')}),fn reqSearch(b)safeResp(req({url:endpoints.search,method:'POST',headers:formHeader(),body:b})),TITLES_LRU_MAX:=32,TITLES_LRU:=lru(TITLES_LRU_MAX),fn getTitles(seed,wall,ch)if true{name:=query(seed,wall,ch,?)->val,val:=TITLES_LRU.get(name)->val,val !=?->val,_->(val:=handleTitler(Titler(seed,wall,ch)),TITLES_LRU.set(name,val),val)},fn getTitle(seed,wall,ch,vol)getTitles(seed,wall,ch).(vol),fn getBook(seed,wall,ch,vol)reqDownload(Download(seed,wall,ch,vol,getTitle(seed,wall,ch,vol))),{Anglishize:Anglishize,Bookmark:Bookmark,Download:Download,Resource:Resource,Search:Search,TITLES_LRU:TITLES_LRU,TITLES_LRU_MAX:TITLES_LRU_MAX,Titler:Titler,bookmarkQuery:bookmarkQuery,endpoints:endpoints,fmt:fmt,formHeader:formHeader,getBook:getBook,getTitle:getTitle,getTitles:getTitles,handleBookmark:handleBookmark,handleHasBookmark:handleHasBookmark,handleRandom:handleRandom,handleTitler:handleTitler,http:http,lru:lru,query:query,redirLocation:redirLocation,reqAnglishize:reqAnglishize,reqBookmark:reqBookmark,reqDownload:reqDownload,reqHasBookmark:reqHasBookmark,reqRandom:reqRandom,reqResource:reqResource,reqSearch:reqSearch,reqTitler:reqTitler,safeResp:safeResp,std:std,str:str,volumeFormat:volumeFormat})),__Oak_Import_Aliases<-{},__oak_module_import('main.oak'))