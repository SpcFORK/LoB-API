std := import('std')
str := import('str')
fmt := import('fmt')
http := import('http')

{
	endpoints: endpoints
	query: query
	bookmarkQuery: bookmarkQuery
	formHeader: formHeader
	safeResp: safeResp
	volumeFormat: volumeFormat
	redirLocation: redirLocation
} := import('cst')

{ lru: lru } := import('lru')

// ---
// @@ Anglishize

fn Anglishize(seed, wall, ch, vol, page) query(seed, wall, ch, vol, page)

fn reqAnglishize(b) with safeResp() req({
	url: endpoints.anglishize + '?' + b
	method: 'GET'
	headers: formHeader()
	body: ''
})

// ---
// @@ Titler

fn Titler(seed, wall, ch) with http.queryEncode() {
	hex: seed
	wall: wall
	shelf: ch
}

fn reqTitler(b) with safeResp() req({
	url: endpoints.titler
	method: 'POST'
	headers: formHeader()
	body: b
})

fn handleTitler(b) reqTitler(b).body |> str.split(';')

// ---
// @@ Download

fn Download(seed, wall, ch, vol, title) with http.queryEncode() {
	hex: seed
	wall: wall
	shelf: ch
	volume: volumeFormat(vol)
	page: ?
	title: title
}

fn reqDownload(b) with safeResp() req({
	url: endpoints.download
	method: 'POST'
	headers: formHeader()
	body: b
})

// ---
// @@ Bookmark

fn Bookmark(seed, wall, ch, vol, page, title) with http.queryEncode() {
	hex: seed
	wall: wall
	shelf: ch
	volume: volumeFormat(vol)
	page: page
	title: title
}

fn reqBookmark(b) with safeResp() req({
	url: endpoints.bookmark
	method: 'POST'
	headers: formHeader()
	body: b
})

fn reqHasBookmark(b) with safeResp() req({
	url: endpoints.bookmark
	method: 'GET'
	headers: formHeader()
	body: b
})

fn handleBookmark(b) reqBookmark(b) |> redirLocation()
fn handleHasBookmark(b) reqHasBookmark(b) |> redirLocation()

// ---
// @@ Resource

fn Resource(s) with http.queryEncode() {
	extension: s
}

fn reqResource(b) with safeResp() req({
	url: endpoints.resourcelocator
	method: 'POST'
	headers: formHeader()
	body: b
})

// ---
// @@ Random

fn reqRandom with safeResp() req({
	url: endpoints.random
	method: 'GET'
	headers: formHeader()
	body: ''
})

fn handleRandom reqRandom() |> redirLocation()

// ---
// @@ Search

fn Search(find, method, btnSubmit) with http.queryEncode() {
	find: find
	btnSubmit: btnSubmit |> std.default('Search')
	method: method |> std.default('x')
}

fn reqSearch(b) with safeResp() req({
	url: endpoints.search
	method: 'POST'
	headers: formHeader()
	body: b
})

// ---
// @@ Title and Books

TITLES_LRU_MAX := 32
TITLES_LRU := lru(TITLES_LRU_MAX)

fn getTitles(seed, wall, ch) if {
	name := query(seed, wall, ch, ?)
	val := TITLES_LRU.get(name)

	val != ? -> val
	_ -> {
		val := Titler(seed, wall, ch) |> handleTitler()
		TITLES_LRU.set(name, val)

		val
	}
}

fn getTitle(seed, wall, ch, vol) getTitles(seed, wall, ch).(vol)

fn getBook(seed, wall, ch, vol) with reqDownload() Download(
	seed
	wall
	ch
	vol
	getTitle(seed, wall, ch, vol)
)