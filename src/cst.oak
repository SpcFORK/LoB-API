std := import('std')
str := import('str')
fmt := import('fmt')
http := import('http')

{ lru: lru } := import('lru')

// ---
// @ API

endpoints := {
	_domain!: fn domain!(v) 'https://libraryofbabel.info/' << v
	_cgi!: fn cgi!(xu) domain!(xu) << '.cgi'

	book: 'book' |> cgi!()
	random: 'random' |> cgi!()
	search: 'search' |> cgi!()
	titler: 'titler' |> cgi!()
	browse: 'browse' |> cgi!()
	download: 'download' |> cgi!()
	anglishize: 'anglishize' |> cgi!()
	bookmarker: 'bookmarker' |> cgi!()
	resourcelocator: 'resourcelocator' |> cgi!()
}

// ---
// @ Core

fn query(seed, wall, ch, vol, page) {
	rest := '{{0}}-w{{1}}-s{{2}}-v{{3}}'
	if page != ? -> rest << ':' << string(page)

	rest |> fmt.format(
		seed |> string()
		wall |> string()
		ch |> string()
		vol |> string() |> str.padStart(2, '0')
	)
}

fn bookmarkQuery(name, index) {
	'{{0}}:{{1}}' |> fmt.format(
		name
		index |> string()
	)
}

// ---
// @ Requests

fn formHeader {
	{ 'content-type': 'application/x-www-form-urlencoded' }
}

fn safeResp(r) std.default(r, {}).resp
fn volumeFormat(v) v |> string() |> str.padStart(2, '0')
fn redirLocation(r) r.headers.Location

// ---
// @ Generations and Monte Carlo

fn powerTwo(i) 2 |> pow(i)
fn shiftLeft(value, shift) value * powerTwo(shift)
fn shiftRight(value, shift) int(value / powerTwo(shift))
fn xorOperation(input, mask, shift) input ^ ((input % mask) |> shiftLeft(shift))

fn calculateRevXorOperation(p, mask, shift) p ^ ((p % mask) |> shiftLeft(shift))
fn calculateRevRightShift(p, shift) p ^ (shiftRight(p, shift))

fn reverseXorOperation(pointer, mask, shift) {
	rev := calculateRevXorOperation(pointer, mask, shift)
	rev <- calculateRevXorOperation(rev, mask, shift)
	pointer ^ ((rev % mask) |> shiftLeft(shift))
}

fn reverseRightShift(pointer, shift) {
	rev := calculateRevRightShift(pointer, shift)
	rev <- calculateRevRightShift(rev, shift)
	pointer ^ (shiftRight(rev, shift))
}