std := import('std')
str := import('str')
fmt := import('fmt')

{
	powerTwo: powerTwo
	shiftLeft: shiftLeft
	shiftRight: shiftRight
	xorOperation: xorOperation
	calculateRevXorOperation: calculateRevXorOperation
	calculateRevRightShift: calculateRevRightShift
	reverseXorOperation: reverseXorOperation
	reverseRightShift: reverseRightShift
} := import('cst')

firstMask := 2636928640
secondMask := 4022730752
firstXorShift := 1098239
firstXorMaskOp := 698879
secondXorMaskOp := 1497599
secondXorShift := 1797118

modValue := 2 |> pow(32)
multiplier := modValue - 1
constant := 987654321

fn RandomGenerator(seed) {
	previous := seed

	fn computeNext {
		pointer := (multiplier * previous - constant + modValue) % modValue

		pointer <- pointer ^ (shiftRight(pointer, firstXorShift))
		pointer <- xorOperation(pointer, firstMask, firstXorMaskOp)
		pointer <- xorOperation(pointer, secondMask, secondXorMaskOp)
		pointer <- pointer ^ (shiftRight(pointer, secondXorShift))

		previous <- pointer
		pointer
	}

	fn reverseInt(value) {
		value <- value ^ (shiftRight(value, secondXorShift))
		value <- calculateRevXorOperation(value, secondMask, secondXorMaskOp)
		value <- calculateRevXorOperation(value, firstMask, firstXorMaskOp)
		value <- value ^ (calculateRevRightShift(value, firstXorShift))

		previous <- value
		value
	}

	{
		next: computeNext
		invert: reverseInt
	}
}

fn createRandomSequence(seed, count, rng) {
	if rng = ? -> rng <- RandomGenerator(seed)
	seq := []

	i := 0
	fn performAction() seq << rng.next()
	fn iterate() if i < count -> {
		performAction()
		i <- i + 1
		iterate()
	}

	iterate()
	seq
}

fn reverseRandomSequence(seed, seq, rng) {
	if rng = ? -> rng <- RandomGenerator(seed)
	reversedSeq := []

	fn performReverse(value) reversedSeq << rng.invert(value)
	with std.each(seq) performReverse

	reversedSeq
}